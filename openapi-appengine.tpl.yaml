swagger: "2.0"
info:
  title: "Lana checkout service"
  description: "A simple checkout service to buy lana merchandising"
  version: "1.0.0"
host: "${GCLOUD_PROJECT}.appspot.com"
basePath: /${SERVICE_VERSION}/${SERVICE_BASE_PATH}
schemes:
  - "https"
consumes:
  - "application/json"
produces:
  - "application/json"
securityDefinitions:
  firebase:
    authorizationUrl: ""
    flow: "implicit"
    type: "oauth2"
    # Replace YOUR-PROJECT-ID with your project ID
    x-google-issuer: "https://securetoken.google.com/${GCLOUD_PROJECT}"
    x-google-jwks_uri: "https://www.googleapis.com/service_accounts/v1/metadata/x509/securetoken@system.gserviceaccount.com"
    # Optional. Replace YOUR-CLIENT-ID with your client ID
    x-google-audiences: "${GCLOUD_PROJECT}"

# Toggle this to enable firebase auth service.
# security:
#   - firebase: []
paths:
  /ping:
    get:
      description: "Test if api is alive."
      operationId: "ping"
      responses:
        200:
          description: "Service is working"
          schema:
            type: object
            properties:
              data:
                $ref: "#/definitions/pong"

  /baskets:
    post:
      description: "Create new basket"
      operationId: "newBasket"
      responses:
        200:
          description: "Created basket"
          schema:
            type: object
            properties:
              data:
                $ref: "#/definitions/basket"

  /baskets/{basket}:
    get:
      description: "Get desired basket"
      operationId: "getBasket"
      parameters:
        - name: basket
          in: path
          description: Requested basket
          type: string
          format: uuid
          required: true
      responses:
        200:
          description: "Basket fetched"
          schema:
            type: object
            properties:
              data:
                $ref: "#/definitions/basket"
        400:
          $ref: '#/responses/NotFound'
        
    delete:
      description: "Delete desired basket"
      operationId: "deleteBasket"
      parameters:
        - name: basket
          in: path
          description: Requested basket
          type: string
          format: uuid
          required: true
      responses:
        204:
          description: "Created basket"
  
  /baskets/{basket}/products/{product}:
    post:
      description: "Add product to basket"
      operationId: "addProduct"
      parameters:
        - name: basket
          in: path
          description: Basket uuid
          type: string
          format: uuid
          required: true
        - name: product
          in: path
          description: Product code
          type: string
          required: true
      responses:
        200:
          description: "Updated basket"
          schema:
            type: object
            properties:
              data:
                $ref: "#/definitions/basket"
        400:
          $ref: '#/responses/NotFound'
        404:
          $ref: '#/responses/BadRequest' 
  /products:
    get:
      description: "Get product catalog"
      operationId: "getProducts"
      responses:
        200:
          description: "Product catalog"
          schema:
            type: array
            items:
              $ref: "#/definitions/products"  
        400:
          $ref: '#/responses/NotFound'
        404:
          $ref: '#/responses/BadRequest' 
    
            

definitions:
  status:
    type: string
    enum:
      - OK
      - KO

  pong:
    type: object
    properties:
      status:
        $ref: "#/definitions/status"
      message:
        type: string

  basket:
    type: object
    properties:
      uuid: 
        type: string
        format: uuid
      items:
        type: array
        items:
          $ref: "#/definitions/products"
      total:
        $ref: "#/definitions/euro"
  
  products:
    type: object
    properties:
      product:
        $ref: "#/definitions/product"
      amount:
        $ref: "#/definitions/euro"
  
  product:
    type: object
    properties:
      code:
        type: string
      name:
        type: string
      price:
        $ref: "#/definitions/euro"

  euro:
    type: string
    pattern: '^\d+\.\d{2}â‚¬$'   

  errorPayload:
    type: object
    properties:
      name:
        type: string
      message:
        type: string
      code:
        type: integer
      className:
        type: string
      data:
        type: array
        items:
          type: object
      errors:
        type: array
        items:
          type: object
      status:
        $ref: "#/definitions/status"
    required:
      - message
      - errors
      - status

responses:
  NotFound:
    description: The specified resources was not found
    schema:
      $ref: "#/definitions/errorPayload"
  Unauthorized:
    description: Unauthorized
    schema:
      $ref: "#/definitions/errorPayload"
  BadRequest:
    description: Bad request
    schema:
      $ref: "#/definitions/errorPayload"
